"""This module contains a specific algorithm for Luka."""

from characters import CharStats
from gui_scripts.user_input import UserInput
from support_light_cones import apply_support_lcs
from calculation_scripts.rotation import RotationList
from calculation_scripts.calculations_utils import calculate_turn_energy


def dfs_algorithm_luka(stats: CharStats, user_input: UserInput) -> RotationList:
    """Luka possesses the ability to use enhanced basic attacks but they generate
    the same amount of energy as a regular basic attack.
    These attacks cost two stacks which are generated by basic attacks, skills, and ultimates.
    Gaining these stacks also provides a small amount of energy."""

    stack_energy_bonus, luka_stacks, enemy_phys_weak = _prep_init_stats(stats,
                                                                        user_input)
    e_basic_cost = 2
    all_rotations = RotationList()
    stack = [(stats.init_energy, [], 0, luka_stacks)]

    while stack:
        curr_energy, turns, skill_points_generated, luka_stacks = stack.pop()

        if curr_energy >= stats.ult_cost:
            all_rotations.add_rotation(curr_energy, turns,
                                       skill_points_generated)
            continue

        curr_energy = apply_support_lcs(stats, user_input, curr_energy)
        turn_energy = calculate_turn_energy(stats, user_input)

        # Luka uses Enhanced Basic
        if luka_stacks >= e_basic_cost:
            stack.append((curr_energy + stats.e_basic + turn_energy,
                          turns + ["E. BASIC"],
                          skill_points_generated + 1,
                          luka_stacks - e_basic_cost))

        # Luka uses Basic, generating one stack and 3 energy
        stack.append((curr_energy + stats.basic + turn_energy + stack_energy_bonus,
                     turns + ["BASIC"],
                     skill_points_generated + 1,
                     luka_stacks + 1))

        # Luka uses Skill, generating one stack and 3 energy,
        # and additionally one stack and 3 energy if enemy has physical weakness
        energy = (curr_energy + stats.skill + turn_energy
                  + stack_energy_bonus * (1 + 1 * enemy_phys_weak))

        stack.append((energy,
                      turns + ["SKILL"],
                      skill_points_generated - 1,
                      luka_stacks + 1 + 1 * enemy_phys_weak))

    return all_rotations


def _prep_init_stats(stats: CharStats, user_input: UserInput) -> tuple[float, int, bool]:
    stats.e_basic = stats.basic
    stack_energy_bonus = 0

    if user_input.trace:
        stack_energy_bonus = 3 * stats.energy_recharge
        stats.init_energy += 2 * stack_energy_bonus * user_input.assume_ult

    # one stack at the start of the battle, + 2 on ult use, +1 on technique use
    luka_stacks = 1 + 2 * user_input.assume_ult + 1 * user_input.technique

    enemy_phys_weak = False
    if user_input.matching_enemy_weakness and user_input.eidolon_level >= 2:
        enemy_phys_weak = True

    return stack_energy_bonus, luka_stacks, enemy_phys_weak
