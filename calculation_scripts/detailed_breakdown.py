from characters import CharStats
from .calculations_utils import Rotation
from gui_scripts.gui_utils import UserInput


def print_detailed_breakdown(stats: CharStats, user_input: UserInput,
                             best_rotation: Rotation) -> None:
    """Lists all the energy sources and the amount of energy they have generated."""

    print(f"Detailed energy breakdown ({stats.ult_cost} ult cost):")

    user_input.retrieve_cache("before-calculation")
    if user_input.assume_ult:
        print(f"Ultimate activation: {round(stats.ult_act, 3)}")

    _print_basic_attack_details(stats, best_rotation)
    _print_skill_attack_details(stats, best_rotation)

    _print_follow_up_details(stats, user_input, best_rotation)
    _print_get_hit_details(stats.get_hit, user_input, best_rotation)
    _print_kill_details(stats.kill, user_input, best_rotation)
    _print_ult_kill_details(stats, user_input)
    print("\n")


def _print_basic_attack_details(stats: CharStats, best_rotation: Rotation) -> None:
    """Prints energy details of Basic attacks, as well as any Enhanced Basic attacks.
    These details include the energy one such attack generates,
    as well as the total energy generated by them."""

    if best_rotation.basic_count > 0:
        basic_energy = round(stats.basic, 3)
        total = round(basic_energy * best_rotation.basic_count, 3)
        print(f"Basic: {basic_energy} (total: {total})")

    if best_rotation.e_basic_count > 0:
        e_basic_energy = round(stats.e_basic, 3)
        total = round(e_basic_energy * best_rotation.e_basic_count, 3)
        print(f"Enhanced Basic: {e_basic_energy} (total: {total})")

    if best_rotation.e_basic_2_count > 0:
        e_basic_2_energy = round(stats.e_basic_2, 3)
        total = round(e_basic_2_energy * best_rotation.e_basic_2_count, 3)
        print(f"Enhanced Basic 2: {e_basic_2_energy} (total: {total})")

    if best_rotation.e_basic_3_count > 0:
        e_basic_3_energy = round(stats.e_basic_3, 3)
        total = round(e_basic_3_energy * best_rotation.e_basic_3_count, 3)
        print(f"Enhanced Basic 3: {e_basic_3_energy} (total: {total})")


def _print_skill_attack_details(stats: CharStats, best_rotation: Rotation) -> None:
    """Prints energy details of Skills, as well as any Enhanced Skills.
    These details include the energy one such skill generates,
    as well as the total energy generated by them."""

    if best_rotation.skill_count > 0:
        skill_energy = round(stats.skill, 3)
        total = round(skill_energy * best_rotation.skill_count, 3)
        print(f"Skill: {skill_energy} (total: {total})")

    if best_rotation.e_skill_count > 0:
        e_skill_energy = round(stats.e_skill, 3)
        total = round(e_skill_energy * best_rotation.e_skill_count, 3)
        print(f"Enhanced Skill: {e_skill_energy} (total: {total})")


def _print_kill_details(kill: float, user_input: UserInput, best_rotation: Rotation) -> None:
    """Prints energy details of kills.
    These details include the energy one kill generates,
    as well as the total energy generated by them."""

    kill_energy = round(kill, 3)
    if user_input.num_kills == "every turn":
        total = kill_energy * best_rotation.num_turns
        print(f"Kill: {kill_energy} (total: {total})")

    elif user_input.num_kills > 1:
        total = round(kill_energy * user_input.num_kills, 3)
        print(f"Kill: {kill_energy} (total: {total})")

    elif user_input.num_kills == 1:
        print(f"Kill: {kill_energy}")


def _print_get_hit_details(get_hit: float, user_input: UserInput,
                           best_rotation: Rotation) -> None:
    """Prints energy details of getting hit.
    These details include the energy getting hit once generates,
    as well as the total energy generated by them."""

    get_hit_energy = round(get_hit, 3)
    if user_input.num_hits_taken == "every turn":
        total = get_hit_energy * best_rotation.num_turns
        print(f"Hit taken: {get_hit_energy} (total: {total})")

    elif user_input.num_hits_taken > 1:
        total = round(get_hit_energy * user_input.num_hits_taken, 3)
        print(f"Hit taken: {get_hit_energy} (total: {total})")

    elif user_input.num_hits_taken == 1:
        print(f"Hit taken: {get_hit_energy}")


def _print_follow_up_details(stats: CharStats,
                             user_input: UserInput, best_rotation: Rotation) -> None:
    """Prints energy details of Follow-up attacks.
    These details include the energy one such attack generates,
    as well as the total energy generated by them."""

    if stats.follow_up > 0:
        follow_up = round(stats.follow_up, 3)

        if user_input.num_follow_ups == "every turn":
            total = follow_up * best_rotation.num_turns
            print(f"Follow-up: {follow_up} (total: {total})")

        elif user_input.num_follow_ups > 1:
            total = follow_up * user_input.num_follow_ups
            print(f"Follow-up: {follow_up} (total: {total})")

        elif user_input.num_follow_ups == 1:
            print(f"Follow-up: {follow_up}")


def _print_ult_kill_details(stats: CharStats, user_input: UserInput):
    """Prints energy details of Follow-up attacks.
    These details include the energy one such attack generates,
    as well as the total energy generated by them."""

    ult_kill_energy = round(stats.ult_kill, 3)
    if user_input.num_ult_kills > 1:
        total = round(ult_kill_energy * user_input.num_ult_kills, 3)
        print(f"Ultimate Kill: {ult_kill_energy} (total: {total})")

    if user_input.num_ult_kills == 1:
        print(f"Ultimate Kill: {ult_kill_energy}")
