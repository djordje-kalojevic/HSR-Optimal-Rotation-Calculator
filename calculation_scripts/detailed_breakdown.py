from termcolor import colored
from characters import HUOHUO_PERCENT_ENERGY_BONUSES, CharStats
from .calculations_utils import Rotation
from gui_scripts.user_input import UserInput
from gui_scripts.counter import Counter


def print_detailed_breakdown(stats: CharStats, user_input: UserInput, rotation: Rotation) -> None:
    """Lists all the energy sources and the amount of energy they have generated."""

    user_input.retrieve_cache("before-calculation")

    print(colored("Detailed energy breakdown "
                  f"({stats.ult_cost} ult cost):", "green"))

    if user_input.assume_ult:
        print(f"Ultimate activation: {round(stats.ult_act, 3)}")

    _print_basic_attack_details(stats, rotation)
    _print_skill_details(stats, rotation)
    _print_other_details(stats, user_input, rotation)
    print("\n")


def _print_basic_attack_details(stats: CharStats, rotation: Rotation) -> None:
    """Prints energy details of Basic attacks, as well as any Enhanced Basic attacks.
    These details include the energy one such attack generates,
    as well as the total energy generated by all of them."""

    print_details("Basics", stats.basic, rotation.basic_count)
    print_details("E. Basics", stats.e_basic, rotation.e_basic_count)
    print_details("E. Basics 2", stats.e_basic_2, rotation.e_basic_2_count)
    print_details("E. Basics 3", stats.e_basic_3, rotation.e_basic_3_count)


def _print_skill_details(stats: CharStats, rotation: Rotation) -> None:
    """Prints energy details of Skills, as well as any Enhanced Skills.
    These details include the energy one such skill generates,
    as well as the total energy generated by all of them."""

    print_details("Skill", stats.skill, rotation.skill_count)
    print_details("E. Skill", stats.e_skill, rotation.e_skill_count)


def _print_other_details(stats: CharStats, user_input: UserInput, rotation: Rotation) -> None:
    """Prints energy details of follow-up attacks, getting hit,
    allies getting hit, getting kills, and Ultimate kills.
    These details include the energy one such occurrence generates,
    as well as the total energy generated by all of them."""

    print_details("Follow-ups", stats.follow_up,
                  user_input.num_follow_ups,
                  rotation.num_turns)

    print_details("Hits taken", stats.get_hit,
                  user_input.num_hits_taken,
                  rotation.num_turns)

    print_details("Ally Hits taken", stats.ally_get_hit,
                  user_input.ally_num_hits_taken,
                  rotation.num_turns)

    print_details("Kills", stats.kill,
                  user_input.num_kills,
                  rotation.num_turns)

    print_details("Ultimate Kills", stats.ult_kill,
                  user_input.num_ult_kills)

    if user_input.relic:
        print_details("Relic triggers",
                      user_input.relic.recharge_value,
                      user_input.num_relic_trigger,
                      rotation.num_turns)

    if user_input.talent:
        print_details("Talent",
                      user_input.talent.energy,
                      user_input.num_talent_triggers,
                      rotation.num_turns)

    if user_input.huohuo_ult_level > 0:
        percentage_bonus = HUOHUO_PERCENT_ENERGY_BONUSES[user_input.huohuo_ult_level - 1]
        energy_bonus = percentage_bonus / 100 * stats.ult_cost
        print_details("HuoHuo Ult bonus", energy_bonus)


def print_details(name: str, value: float,
                  trigger_count: Counter | int = 1,
                  num_turns=0) -> None:
    """Prints energy details of the specified action.
    These details include the energy one such occurrence generates,
    as well as the total energy generated by all of them."""

    if value == 0:
        return

    energy = round(value, 3)
    total_energy = _find_actions_total_energy(energy, trigger_count, num_turns)

    if total_energy == 0:
        return

    if energy == total_energy:
        print(f"{name}: {energy}")

    elif total_energy > energy:
        print(f"{name}: {energy} (total: {total_energy})")


def _find_actions_total_energy(energy: float,
                               trigger_count: Counter | int = 1,
                               num_turns=0) -> float:
    """Finds and returns the total energy a certain type of action has generated.
    If there were no occurrences of said action, returns 0 instead."""

    if isinstance(trigger_count, Counter):
        if trigger_count.repeat_every_turn:
            return round(energy * num_turns * trigger_count.num_triggers, 3)

        elif trigger_count.num_triggers > 1:
            return round(energy * trigger_count.num_triggers, 3)

    elif trigger_count > 0:
        return round(energy * trigger_count, 3)

    return 0
